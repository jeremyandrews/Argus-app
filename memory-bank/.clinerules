# Argus iOS App - Project Intelligence

This file captures important patterns, preferences, and project intelligence that helps Cline work more effectively with the Argus iOS app project. It will be updated as new patterns and insights are discovered.

## Code Style Preferences

### Swift Conventions
- Use Swift's native error handling with `do-catch` blocks
- Prefer Swift's strong typing and avoid force unwrapping when possible
- Use Swift's property wrappers (@Published, @State, etc.) for SwiftUI state management
- Follow Apple's Swift API Design Guidelines for naming conventions

### SwiftUI Patterns
- Use the MVVM pattern with ObservableObject for complex views
- Extract reusable components into separate views
- Use preview providers for all UI components
- Avoid excessive view modifiers that can impact performance
- Use updated onChange API (iOS 17+) with two parameters:
  ```swift
  // Deprecated in iOS 17 (single parameter version):
  .onChange(of: someValue) { newValue in
      // Handle change
  }
  
  // New API (two parameter version):
  .onChange(of: someValue) { oldValue, newValue in
      // Handle change with access to both values
  }
  ```

### UI Update Patterns
- Connect UI controls to view model updates using onChange:
  ```swift
  Toggle(isOn: $showUnreadOnly) {
      Label("Unread Only", systemImage: "envelope.badge")
  }
  .onChange(of: showUnreadOnly) { _, _ in
      onFilterChanged() // Call a callback to update the ViewModel
  }
  ```
- Use callback-based components for UI updates:
  ```swift
  // Define components with callbacks
  private struct FilterView: View {
      @Binding var showUnreadOnly: Bool
      @Binding var showBookmarkedOnly: Bool
      var onFilterChanged: () -> Void // Callback for when filters change
      
      var body: some View {
          // View implementation that calls onFilterChanged when needed
      }
  }
  
  // Use components with explicit callbacks
  FilterView(
      showUnreadOnly: $viewModel.showUnreadOnly,
      showBookmarkedOnly: $viewModel.showBookmarkedOnly,
      onFilterChanged: {
          Task {
              await viewModel.applyFilters(...)
          }
      }
  )
  ```
- Auto-redirect empty topics using a dedicated method:
  ```swift
  // Check if the current topic has content and redirect if needed
  @MainActor
  func refreshWithAutoRedirectIfNeeded() async {
      // First do the normal refresh
      await refreshArticles()
      
      // Then check if we need to redirect
      if filteredArticles.isEmpty && selectedTopic != "All" {
          // Revert to "All" topic
          selectedTopic = "All"
          saveUserPreferences()
          await refreshArticles()
      }
  }
  ```
- Use NotificationCenter for cross-component communication:
  ```swift
  // Post notifications when state changes
  NotificationCenter.default.post(
      name: Notification.Name.articleProcessingCompleted,
      object: nil
  )
  
  // Observe notifications to update UI
  .onReceive(NotificationCenter.default.publisher(for: Notification.Name("ArticleProcessingCompleted"))) { _ in
      Task {
          await viewModel.refreshAfterBackgroundSync()
      }
  }
  ```

### Rich Text Display Component Selection
- Always use `NonSelectableRichTextView` for rich text display in list views and detail views for consistent rendering
- Never use `AccessibleAttributedText` for article body content in list views (causes text wrapping issues)
- The internal implementation differences between these components affect:
  - Text wrapping behavior (NonSelectableRichTextView uses proper width constraints)
  - Font handling (NonSelectableRichTextView forces body font style on all content)
  - Text container configuration (different padding values: 32px vs 40px)
- Each UIComponent has specific use cases:
  - `NonSelectableRichTextView`: Article body content in lists and detail views
  - `AccessibleAttributedText`: Accessibility-focused content where selection isn't needed
  - `RichTextView`: Content where text selection is required
- When implementing new views with rich text content, maintain component consistency:
  ```swift
  // CORRECT: Using NonSelectableRichTextView for article content
  if let bodyBlobData = article.bodyBlob,
     let attributedString = try? NSKeyedUnarchiver.unarchivedObject(
         ofClass: NSAttributedString.self,
         from: bodyBlobData
     ) {
      NonSelectableRichTextView(attributedString: attributedString)
          .foregroundColor(.secondary)
          .padding(.top, 5)
          .textSelection(.disabled)
  }
  ```

## Project-Specific Patterns

### File Organization
- Swift files are organized by functionality within the main Argus directory
- UI components are separated from data processing logic
- Utilities and helpers are in dedicated files (MarkdownUtilities, NotificationUtils, etc.)

### Data Flow
- The SyncManager handles all data synchronization with the backend
- The DatabaseCoordinator centralizes all database operations using the actor model
- View models observe data changes and update the UI accordingly
- ArticleModelAdapter handles bidirectional conversion between ArticleModel and NotificationData
- All fields in ArticleModel, including JSON fields (engineStats, similarArticles), must be transferred in both directions
- Both "from" conversion method and "updateBlobs" method need complete field mapping for proper app functionality

### View-ViewModel Integration
- ViewModels and Views may define their own enum types with the same names - always check for type compatibility
- When calling ViewModel methods that take enum parameters, always ensure proper type conversion:
  ```swift
  // Convert View's NavigationDirection enum to ViewModel's NavigationDirection enum
  let viewModelDirection: NewsDetailViewModel.NavigationDirection = 
      direction == .next ? .next : .previous
      
  // Then call the ViewModel method with the converted enum
  viewModel.navigateToArticle(direction: viewModelDirection)
  ```
- Use ViewModel properties directly for UI state management (button enabled/disabled states):
  ```swift
  // Previous button - disabled when at first article
  .disabled(viewModel.currentIndex == 0)
  .foregroundColor(viewModel.currentIndex > 0 ? .primary : .gray)
  ```
- Ensure UI state stays synchronized with ViewModel after operations:
  ```swift
  // After navigation, update UI state with ViewModel state
  currentIndex = viewModel.currentIndex
  clearCache() // Reset any view-specific cached content
  ```

### Known Implementation Paths
- Push notifications are set up using the Apple Push Notification Service and the AuthKey_KKR79MB4FW.p8 file
- Markdown conversion happens in MarkdownUtilities.swift
- Background sync operations are managed in BackgroundTaskManager.swift
- Array chunking utilities are in ArrayExtensions.swift
- Auto-redirect from empty topics is implemented in NewsViewModel.refreshWithAutoRedirectIfNeeded()
- Filter updating happens through the FilterView's onFilterChanged callback
- Background sync notifications are posted from BackgroundTaskManager.processArticlesInBatches()

## Swift 6 Concurrency Patterns

### iOS 18+ Progress Indicator Patterns
- Follow standard iOS 18+ patterns for progress indicators in navigation bars:
  - Place icon or activity indicator first (left side)
  - Text should follow the indicator (standard iOS convention)
  - Use circular progress indicators for navigation bar operations (not linear)
  - Format progress count in parentheses within the message: "Operation... (X of Y)"
  - Avoid redundant information display (only show count once)
  - Use 8-point spacing between elements for proper visual flow
  - Example implementation:
    ```swift
    HStack(spacing: 8) {
        // Activity indicator first (standard iOS pattern)
        if status.isActive {
            ProgressView()
                .progressViewStyle(CircularProgressViewStyle())
                .scaleEffect(0.8)
        } else if status.shouldDisplay {
            Image(systemName: status.systemImage)
                .foregroundColor(colorForStatus)
        }
        
        // Status text follows (standard iOS pattern)
        if status.shouldDisplay {
            Text(status.message)
                .font(.footnote)
                .foregroundColor(.secondary)
        }
    }
    ```
  - Format status messages to include progress information:
    ```swift
    // Standard iOS format: "Operation... (X of Y)"
    return "Downloading articles... (\(current) of \(total))"
    ```
  - This pattern matches Apple's native apps (Files, Mail, App Store) for consistent user experience

### NSAttributedString and Sendable Constraints
- NSAttributedString is not Sendable and requires special handling in async contexts
- Always use @MainActor for functions that generate or manipulate NSAttributedString for UI
- For LazyLoadingContentView and similar components, use Task { @MainActor in ... } to constrain the entire task
- Avoid passing NSAttributedString across actor boundaries without proper isolation:
  ```swift
  // Wrong: Crossing actor boundaries with non-Sendable type
  let attributedString = await backgroundActor.getAttributedString()
  
  // Correct: Keep operations isolated to MainActor
  await MainActor.run {
      let attributedString = getAttributedString()
      // Use attributedString here, within MainActor context
  }
  ```
- Generate rich text synchronously during database operations:
  ```swift
  // Wrong: Asynchronous fire-and-forget approach causes race conditions
  Task { @MainActor in
      _ = getAttributedString(for: .title, from: article)
  }
  
  // Correct: Synchronous generation ensures rich text exists before transaction completes
  await MainActor.run {
      _ = getAttributedString(for: .title, from: article)
      _ = getAttributedString(for: .body, from: article)
  }
  ```

### Swift 6 Closure Capture Requirements
- Use explicit self references in closure context in Swift 6:
  ```swift
  // WRONG - Swift 6 will generate errors:
  if filteredArticles.isEmpty && selectedTopic != "All" {
      AppLogger.database.debug("No content for topic '\(selectedTopic)'")
  }
  
  // CORRECT - Swift 6 compliant:
  if filteredArticles.isEmpty && selectedTopic != "All" {
      AppLogger.database.debug("No content for topic '\(self.selectedTopic)'")
  }
  ```
- Replace optional chaining with proper do-catch error handling:
  ```swift
  // WRONG - Swift 6 will generate warnings:
  allArticles = try? await articleOperations.fetchArticles(...) ?? []
  
  // CORRECT - Swift 6 compliant:
  do {
      allArticles = try await articleOperations.fetchArticles(...)
  } catch {
      AppLogger.database.error("Error fetching articles: \(error)")
      // Fallback handling
  }
  ```

### Actor Model Implementation
- The DatabaseCoordinator is implemented as a Swift actor to provide thread-safe access to SwiftData
- All database operations should go through the DatabaseCoordinator to ensure isolation
- Use the pattern: `await DatabaseCoordinator.shared.methodName()` for all database operations

### Variable Capture in Closures
- Create local copies of captured variables before using them in closures:
  ```swift
  let localCopy = capturedVariable
  // Use localCopy in closure instead of directly using capturedVariable
  ```
- When dealing with collections within actors, prefer collecting results in local collections first, then update actor-isolated state in a single step

### Transaction Patterns
- Use the performTransaction pattern for all database operations:
  ```swift
  try await performTransaction { coordinator, context in
      // Use context for database operations
      // Return result that will be returned from performTransaction
  }
  ```
- Add fallback paths for transaction errors, e.g.:
  ```swift
  return (try? await performTransaction { ... }) ?? defaultValue
  ```

### Batch Processing
- When processing batches of items, use ArrayExtensions.chunked(into:) to create smaller batches:
  ```swift
  for batch in items.chunked(into: 100) {
      // Process batch
  }
  ```
- Use Swift's TaskGroup for concurrent processing while controlling maximum concurrency

### NSCache Usage and Thread Safety
- NSCache is not Sendable - avoid directly accessing actor-isolated NSCache properties from closures
- Instead, read values from caches at the beginning of functions, then use locals in closures
- Update caches after transaction completion, not within transaction blocks
- For caching services (like ArticleService), implement comprehensive thread safety:
  - Use dedicated serial dispatch queue for all cache operations:
    ```swift
    private let cacheQueue = DispatchQueue(label: "com.argus.articleservice.cache")
    ```
  - Make read operations synchronous on the queue to ensure data consistency:
    ```swift
    func checkCache(for key: String) -> [SomeType]? {
        return cacheQueue.sync {
            // Access cache state safely here
            if let result = cache.object(forKey: key as NSString) as? [SomeType] {
                return result
            }
            return nil
        }
    }
    ```
  - Make write operations asynchronous for better performance:
    ```swift
    func cacheResults(_ results: [SomeType], for key: String) {
        cacheQueue.async {
            // Update cache state safely here
            self.cache.setObject(results as NSArray, forKey: key as NSString)
            self.lastCacheUpdate = Date()
            self.cacheKeys.insert(key)
        }
    }
    ```
  - Create helper methods for safer cache state access:
    ```swift
    private func withSafeCache<T>(_ operation: @escaping () -> T) -> T {
        return cacheQueue.sync {
            return operation()
        }
    }
    
    private func hasCacheKey(_ key: String) -> Bool {
        return cacheQueue.sync {
            return self.cacheKeys.contains(key)
        }
    }
    ```
  - For async methods that need to call cache operations, use withCheckedContinuation:
    ```swift
    // Example: clearCache needs to be called from an async method
    await withCheckedContinuation { continuation in
        clearCache()  // This runs asynchronously on the cacheQueue
        continuation.resume()
    }
    ```
  - Add comprehensive logging for cache operations to diagnose issues
  - Add clear thread-safety documentation to class and method comments

### Actor Initialization and Self Capture
- Never capture self in a task or closure before all properties are initialized
- Use a two-step initialization pattern for actors with async dependencies:
  ```swift
  // Initialize properties to nil/default values first
  private var asyncDependency: AsyncDependency?
  
  init() {
    // Set all required properties
    self.asyncDependency = nil
    
    // After full initialization, create the task
    createInitializationTaskIfNeeded()
  }
  
  private func createInitializationTaskIfNeeded() {
    if asyncDependency != nil { return }
    
    // Use weak self to avoid retain cycles
    weak var weakSelf = self
    
    Task {
      let dependency = await AsyncDependency.shared
      
      // Update stored reference on the main actor
      if let strongSelf = weakSelf {
        await MainActor.run {
          strongSelf.asyncDependency = dependency
        }
      }
    }
  }
  ```
- For accessor methods that need the async dependency, implement wait-with-timeout pattern:
  ```swift
  private func getInitializedDependency() async throws -> AsyncDependency {
    // Try direct access first
    if let dependency = asyncDependency {
      return dependency
    }
    
    // Create the initialization task if needed
    createInitializationTaskIfNeeded()
    
    // Wait with timeout
    return try await withTimeout(duration: .seconds(5)) {
      try await initializationTask!.value
    }
  }
  ```

### SwiftData Context Safety Patterns
- Always implement a fallback mechanism when using direct DatabaseCoordinator methods
- For topic switching, use a two-tier approach:
  ```swift
  // First tier: Immediate UI update from cache
  if isCacheValid && notificationsCache.keys.contains(topicToUse) {
      let cachedTopicData = notificationsCache[topicToUse] ?? []
      let filtered = filterNotificationsWithCurrentSettings(cachedTopicData)
      
      // Update UI immediately with cached data
      Task(priority: .userInitiated) {
          let updatedGrouping = await createGroupedNotifications(filtered)
          
          await MainActor.run {
              self.filteredNotifications = filtered
              self.sortedAndGroupedNotifications = updatedGrouping
          }
      }
  }
  
  // Second tier: Fall back to traditional filtering if DatabaseCoordinator methods fail
  updateFilteredNotifications(force: true)
  ```
- Avoid context.save() inside complex asynchronous operations that might cause EXC_BAD_ACCESS
- When DatabaseCoordinator methods fail with context issues, catch the error and use established filtering methods

### SwiftData and Main Actor Patterns
- Always add @MainActor annotation to methods that access SwiftData contexts:
  ```swift
  // WRONG: Missing @MainActor annotation
  func countUnviewedArticles() async throws -> Int {
      let context = container.mainContext // This will fail in Swift 6
      let count = try context.fetchCount(descriptor)
      return count
  }
  
  // CORRECT: With @MainActor annotation
  @MainActor
  func countUnviewedArticles() async throws -> Int {
      let context = container.mainContext // This is now safe
      let count = try context.fetchCount(descriptor)
      return count
  }
  ```
- Never use await when accessing main actor-isolated properties from @MainActor-annotated code:
  ```swift
  // WRONG: Using await in @MainActor-annotated method
  @MainActor
  func getContext() async -> ModelContext {
      let context = await container.mainContext // This will fail in Swift 6
      return context
  }
  
  // CORRECT: Direct access in @MainActor-annotated method
  @MainActor
  func getContext() -> ModelContext {
      let context = container.mainContext // This is correct
      return context
  }
  ```
- Ensure proper error handling in all database operations:
  ```swift
  @MainActor
  func countUnviewedArticles() async throws -> Int {
      do {
          let context = container.mainContext
          let descriptor = FetchDescriptor<ArticleModel>(
              predicate: #Predicate<ArticleModel> { !$0.isViewed }
          )
          
          let count = try context.fetchCount(descriptor)
          ModernizationLogger.log(.debug, component: .articleService, 
              message: "Fetched unviewed article count: \(count)")
          return count
      } catch {
          ModernizationLogger.log(.error, component: .articleService, 
              message: "Error fetching unviewed articles: \(error)")
          throw ArticleServiceError.databaseError(error)
      }
  }
  ```
- Query the correct database model when models have been migrated:
  ```swift
  // WRONG: Querying legacy model after migration
  let descriptor = FetchDescriptor<NotificationData>(
      predicate: #Predicate<NotificationData> { !$0.isViewed }
  )
  
  // CORRECT: Querying current model
  let descriptor = FetchDescriptor<ArticleModel>(
      predicate: #Predicate<ArticleModel> { !$0.isViewed }
  )
  ```
- Always check permissions before attempting operations that require them:
  ```swift
  // For notification permissions
  @MainActor
  private static func hasNotificationPermission() async -> Bool {
      let settings = await UNUserNotificationCenter.current().notificationSettings()
      return settings.authorizationStatus == .authorized
  }
  
  @MainActor
  private static func performBadgeUpdate() async {
      // Check permission first
      guard await hasNotificationPermission() else {
          AppLogger.ui.warning("Cannot update badge: notification permission not granted")
          return
      }
      
      // Proceed with badge update
  }
  ```

## Modernization Strategy

### Three-Tier Architecture Pattern
- Implement a three-tiered architecture to maximize code reuse:
  1. **Data Layer**: ArticleService handles API and SwiftData operations
  2. **Business Logic Layer**: ArticleOperations contains shared operations
  3. **View Models Layer**: ViewModels specific to each view

- ArticleServiceProtocol enables dependency injection and testing:
  ```swift
  protocol ArticleServiceProtocol {
      func fetchArticles(topic: String?, isRead: Bool?, isBookmarked: Bool?, isArchived: Bool?) async throws -> [NotificationData]
      func fetchArticle(byId id: UUID) async throws -> NotificationData?
      func markArticle(id: UUID, asRead: Bool) async throws
      func markArticle(id: UUID, asBookmarked: Bool) async throws
      func markArticle(id: UUID, asArchived: Bool) async throws
      func deleteArticle(id: UUID) async throws
      // Other methods...
  }
  ```

- ArticleOperations provides shared functionality:
  ```swift
  class ArticleOperations {
      private let articleService: ArticleServiceProtocol
      
      init(articleService: ArticleServiceProtocol = ArticleService.shared) {
          self.articleService = articleService
      }
      
      // Shared operations for both NewsViewModel and NewsDetailViewModel
      func toggleReadStatus(for article: NotificationData) async throws {
          try await articleService.markArticle(id: article.id, asRead: !article.isViewed)
          NotificationUtils.updateAppBadgeCount()
      }
      
      func toggleBookmark(for article: NotificationData) async throws {
          try await articleService.markArticle(id: article.id, asBookmarked: !article.isBookmarked)
      }
      
      func getAttributedContent(for article: NotificationData, field: RichTextField) async -> NSAttributedString? {
          await MainActor.run {
              return getAttributedString(for: field, from: article, createIfMissing: true)
          }
      }
  }
  ```

### MVVM Pattern Implementation
- ViewModels should use the shared ArticleOperations for common functionality:
  ```swift
  class NewsViewModel: ObservableObject {
    private let articleOperations: ArticleOperations
    
    @Published var articles: [Article] = []
    @Published var isLoading: Bool = false
    @Published var error: Error? = nil
    
    init(articleOperations: ArticleOperations = ArticleOperations()) {
        self.articleOperations = articleOperations
    }
    
    func refreshArticles() async {
        await MainActor.run { isLoading = true }
        do {
            let articles = try await articleOperations.fetchArticles(topic: selectedTopic)
            await MainActor.run { 
                self.articles = articles
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                self.error = error
                self.isLoading = false
            }
        }
    }
    
    func toggleReadStatus(for article: Article) async {
        try? await articleOperations.toggleReadStatus(for: article)
    }
  }
  ```
- ViewModels should be injected into views using @StateObject for view-owned ViewModels or @ObservedObject for parent-provided ViewModels:
  ```swift
  struct NewsView: View {
      @StateObject private var viewModel = NewsViewModel()
      
      var body: some View {
          List(viewModel.articles) { article in
              ArticleRow(article: article)
          }
          .refreshable {
              await viewModel.refreshArticles()
          }
      }
  }
  ```
- Business logic should be moved from views to ViewModels
- UI state should be represented by @Published properties in ViewModels
- Use a dependency injection approach for services accessed by ViewModels

### SwiftData and CloudKit Integration
- Avoid creating multiple ModelContainer instances with different schemas:
  ```swift
  // INCORRECT: Creating multiple containers with different schemas
  static let legacyContainer = ModelContainer(for: [LegacyModel.self])
  static let newContainer = ModelContainer(for: [NewModel.self])
  
  // CORRECT: One unified container with all models
  static let sharedContainer = ModelContainer(for: Schema([
      // Legacy models
      LegacyModel.self,
      // New models
      NewModel.self
  ]))
  ```
- Use a singleton container pattern to ensure consistent database access:
  ```swift
  class SwiftDataContainer {
      static let shared = SwiftDataContainer()
      let container: ModelContainer
      
      private init() {
          // Initialize container with all models in a single schema
      }
  }
  
  // In your app struct:
  @MainActor
  static var sharedModelContainer: ModelContainer {
      return SwiftDataContainer.shared.container
  }
  ```
- Implement proper fallback mechanisms for CloudKit errors:
  ```swift
  do {
      // First try CloudKit integration
      let cloudKitConfig = ModelConfiguration(schema: schema)
      container = try ModelContainer(for: schema, configurations: [cloudKitConfig])
  } catch {
      // Log CloudKit error details
      logger.error("CloudKit container creation failed: \(error)")
      
      // Fall back to local persistent storage
      do {
          let localConfig = ModelConfiguration(url: localDbPath)
          container = try ModelContainer(for: schema, configurations: [localConfig])
      } catch {
          // Last resort - in-memory container
          logger.critical("All persistent storage attempts failed: \(error)")
          let fallbackConfig = ModelConfiguration(isStoredInMemoryOnly: true)
          container = try ModelContainer(for: schema, configurations: [fallbackConfig])
      }
  }
  ```
- Ensure database table creation works for all required tables, adding direct SQL for legacy tables:
  ```swift
  // Direct SQL creation for legacy tables as fallback
  if tableCount == 0 || legacyTablesCount == 0 {
      let createTableSQL = """
      CREATE TABLE IF NOT EXISTS ZLEGACYTABLE (
          Z_PK INTEGER PRIMARY KEY AUTOINCREMENT,
          ZFIELD TEXT NOT NULL
      );
      """
      sqlite3_exec(db, createTableSQL, nil, nil, nil)
  }
  ```
- Use consistent URL paths for database access across all components
- Add table existence verification before operations:
  ```swift
  func verifyDatabaseTablesExist() -> Bool {
      // Check if required tables exist using SQLite directly
      let tableCheckQuery = """
          SELECT count(*) FROM sqlite_master
          WHERE type='table' AND (name LIKE '%REQUIREDTABLE');
      """
      // Execute query and verify result
  }
  ```
- Document CloudKit container identifiers in your code for clarity:
  ```swift
  // CloudKit container identifier from app entitlements
  private let cloudKitContainerIdentifier = "iCloud.com.company.AppName"
  ```

### SwiftData Implementation
- Use the @Model macro for all persistent model types:
  ```swift
  @Model
  class Article {
      // CloudKit compatibility: default values for all required properties
      var id: String = ""
      var title: String = ""
      var body: String = ""
      var publishDate: Date = Date()
      @Relationship(.cascade) var topics: [Topic]? = []
      
      // Additional fields for tracking state
      var isRead: Bool = false
      var isBookmarked: Bool = false
  }
  ```
- Ensure all required properties have default values for CloudKit compatibility
- Do not use @Attribute(.unique) constraints (not supported by CloudKit)
- Implement application-level uniqueness validation in repository layer
- Define the model container at the app level:
  ```swift
  @main
  struct ArgusApp: App {
      let container = ModelContainer(for: [Article.self, Topic.self])
      
      var body: some Scene {
          WindowGroup {
              ContentView()
          }
          .modelContainer(container)
      }
  }
  ```
- Use @Query for simple data access in views:
  ```swift
  @Query(filter: #Predicate<Article> { article in
      !article.isRead
  }, sort: \Article.publishDate, order: .reverse)
  private var unreadArticles: [Article]
  ```
- Create specialized SwiftData queries in ViewModels for more complex scenarios
- Implement proper error handling and retry mechanisms for data persistence operations

### Async/Await Implementation 
- Refactor API calls to use async/await instead of completion handlers:
  ```swift
  // Old approach with completion handlers
  func fetchArticles(completion: @escaping (Result<[Article], Error>) -> Void) {
      // Implementation
  }
  
  // New approach with async/await
  func fetchArticles() async throws -> [Article] {
      // Implementation
  }
  ```
- Use structured concurrency with proper task management:
  ```swift
  Task {
      try await articleService.updateArticlesFromServer()
  }
  ```
- Handle task cancellation properly:
  ```swift
  let task = Task {
      try await articleService.updateArticlesFromServer()
  }
  
  // Later if needed
  task.cancel()
  
  // In the operation
  try Task.checkCancellation()
  ```
- Use TaskGroup for concurrent operations with controlled concurrency
- Ensure proper actor isolation is maintained throughout the codebase

### Background Task Implementation
- Implement background tasks using .backgroundTask or BGTaskScheduler:
  ```swift
  // Modern implementation for iOS 18+
  .backgroundTask(.appRefresh("com.andrews.Argus.sync")) {
      await articleService.updateArticlesFromServer()
  }
  ```
- Handle task expiration properly:
  ```swift
  // For BGTaskScheduler (iOS 17 and earlier)
  task.expirationHandler = {
      // Handle task expiration (cancel any ongoing work)
  }
  ```
- Ensure background tasks are properly scheduled and managed
- Implement proper push notification handling with async/await

## Article Section Loading Best Practices

### Sequential Loading Process
- Implement a three-phase loading approach for article section content:
  ```swift
  // PHASE 1: BLOB LOADING (fastest path)
  let blobs = article.getBlobsForField(field)
  if let blob = blobs?.first {
      do {
          let attributedString = try NSKeyedUnarchiver.unarchivedObject(
              ofClass: NSAttributedString.self,
              from: blob
          )
          if let content = attributedString {
              // Use blob content immediately
              return content
          }
      } catch {
          AppLogger.database.error("Error unarchiving blob: \(error)")
      }
  }
  
  // PHASE 2: RICH TEXT GENERATION (only if blob loading fails)
  do {
      let attributedString = try await withTimeout(duration: .seconds(3)) {
          let textContent = self.getTextContentForField(field, from: article)
          return self.articleOperations.getAttributedContent(
              for: field,
              from: article,
              createIfMissing: true
          )
      }
      if let content = attributedString {
          return content
      }
  } catch {
      AppLogger.database.error("Error during rich text generation: \(error)")
  }
  
  // PHASE 3: PLAIN TEXT FALLBACK (when all else fails)
  if let rawText = getTextContentForField(field, from: article), !rawText.isEmpty {
      return NSAttributedString(
          string: rawText,
          attributes: [
              .font: UIFont.preferredFont(forTextStyle: .body),
              .foregroundColor: UIColor.label
          ]
      )
  }
  ```

### Comprehensive Logging for Section Loading
- Add detailed phase-based logging to track content loading:
  ```swift
  AppLogger.database.debug("🔍 SECTION LOAD START: \(section) for article \(article.id)")
  
  // Log blob check timing
  let blobStart = Date()
  let blobs = article.getBlobsForField(field)
  let blobCheckTime = Date().timeIntervalSince(blobStart)
  AppLogger.database.debug("⏱️ Blob check took \(String(format: "%.4f", blobCheckTime))s, hasBlob: \(blobs?.first != nil)")
  
  // Log extraction timing
  let extractStart = Date()
  let attributedString = try NSKeyedUnarchiver.unarchivedObject(...)
  let extractTime = Date().timeIntervalSince(extractStart)
  AppLogger.database.debug("⏱️ Extraction took \(String(format: "%.4f", extractTime))s")
  
  // Log generation timing
  let genStart = Date()
  let result = getAttributedContent(...)
  let genTime = Date().timeIntervalSince(genStart)
  AppLogger.database.debug("⏱️ Generation took \(String(format: "%.4f", genTime))s")
  
  // Log total time
  let totalTime = Date().timeIntervalSince(startTime)
  AppLogger.database.debug("✅ SECTION LOAD SUCCESS via METHOD in \(String(format: "%.4f", totalTime))s")
  ```

### User Experience During Loading
- Always provide loading status indicators for long operations:
  ```swift
  // Show temporary conversion status
  @MainActor
  private func provideTempContent(_ section: String, _ field: RichTextField, _ message: String) {
      // Create a temporary attributed string to show status
