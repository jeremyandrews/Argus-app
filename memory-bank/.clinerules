# Argus iOS App - Project Intelligence

This file captures important patterns, preferences, and project intelligence that helps Cline work more effectively with the Argus iOS app project. It will be updated as new patterns and insights are discovered.

## Code Style Preferences

### Swift Conventions
- Use Swift's native error handling with `do-catch` blocks
- Prefer Swift's strong typing and avoid force unwrapping when possible
- Use Swift's property wrappers (@Published, @State, etc.) for SwiftUI state management
- Follow Apple's Swift API Design Guidelines for naming conventions

### SwiftUI Patterns
- Use the MVVM pattern with ObservableObject for complex views
- Extract reusable components into separate views
- Use preview providers for all UI components
- Avoid excessive view modifiers that can impact performance
- Use updated onChange API (iOS 17+) with two parameters:
  ```swift
  // Deprecated in iOS 17 (single parameter version):
  .onChange(of: someValue) { newValue in
      // Handle change
  }
  
  // New API (two parameter version):
  .onChange(of: someValue) { oldValue, newValue in
      // Handle change with access to both values
  }
  ```

## Project-Specific Patterns

### File Organization
- Swift files are organized by functionality within the main Argus directory
- UI components are separated from data processing logic
- Utilities and helpers are in dedicated files (MarkdownUtilities, NotificationUtils, etc.)

### Data Flow
- The SyncManager handles all data synchronization with the backend
- The DatabaseCoordinator centralizes all database operations using the actor model
- View models observe data changes and update the UI accordingly

### Known Implementation Paths
- Push notifications are set up using the Apple Push Notification Service and the AuthKey_KKR79MB4FW.p8 file
- Markdown conversion happens in MarkdownUtilities.swift
- Background sync operations are managed in BackgroundContextManager.swift
- Array chunking utilities are in ArrayExtensions.swift

## Swift 6 Concurrency Patterns

### NSAttributedString and Sendable Constraints
- NSAttributedString is not Sendable and requires special handling in async contexts
- Always use @MainActor for functions that generate or manipulate NSAttributedString for UI
- For LazyLoadingContentView and similar components, use Task { @MainActor in ... } to constrain the entire task
- Avoid passing NSAttributedString across actor boundaries without proper isolation:
  ```swift
  // Wrong: Crossing actor boundaries with non-Sendable type
  let attributedString = await backgroundActor.getAttributedString()
  
  // Correct: Keep operations isolated to MainActor
  await MainActor.run {
      let attributedString = getAttributedString()
      // Use attributedString here, within MainActor context
  }
  ```
- Generate rich text synchronously during database operations:
  ```swift
  // Wrong: Asynchronous fire-and-forget approach causes race conditions
  Task { @MainActor in
      _ = getAttributedString(for: .title, from: article)
  }
  
  // Correct: Synchronous generation ensures rich text exists before transaction completes
  await MainActor.run {
      _ = getAttributedString(for: .title, from: article)
      _ = getAttributedString(for: .body, from: article)
  }
  ```

### Actor Model Implementation
- The DatabaseCoordinator is implemented as a Swift actor to provide thread-safe access to SwiftData
- All database operations should go through the DatabaseCoordinator to ensure isolation
- Use the pattern: `await DatabaseCoordinator.shared.methodName()` for all database operations

### Variable Capture in Closures
- Create local copies of captured variables before using them in closures:
  ```swift
  let localCopy = capturedVariable
  // Use localCopy in closure instead of directly using capturedVariable
  ```
- When dealing with collections within actors, prefer collecting results in local collections first, then update actor-isolated state in a single step

### Transaction Patterns
- Use the performTransaction pattern for all database operations:
  ```swift
  try await performTransaction { coordinator, context in
      // Use context for database operations
      // Return result that will be returned from performTransaction
  }
  ```
- Add fallback paths for transaction errors, e.g.:
  ```swift
  return (try? await performTransaction { ... }) ?? defaultValue
  ```

### Batch Processing
- When processing batches of items, use ArrayExtensions.chunked(into:) to create smaller batches:
  ```swift
  for batch in items.chunked(into: 100) {
      // Process batch
  }
  ```
- Use Swift's TaskGroup for concurrent processing while controlling maximum concurrency

### NSCache Usage
- NSCache is not Sendable - avoid directly accessing actor-isolated NSCache properties from closures
- Instead, read values from caches at the beginning of functions, then use locals in closures
- Update caches after transaction completion, not within transaction blocks

### SwiftData Context Safety Patterns
- Always implement a fallback mechanism when using direct DatabaseCoordinator methods
- For topic switching, use a two-tier approach:
  ```swift
  // First tier: Immediate UI update from cache
  if isCacheValid && notificationsCache.keys.contains(topicToUse) {
      let cachedTopicData = notificationsCache[topicToUse] ?? []
      let filtered = filterNotificationsWithCurrentSettings(cachedTopicData)
      
      // Update UI immediately with cached data
      Task(priority: .userInitiated) {
          let updatedGrouping = await createGroupedNotifications(filtered)
          
          await MainActor.run {
              self.filteredNotifications = filtered
              self.sortedAndGroupedNotifications = updatedGrouping
          }
      }
  }
  
  // Second tier: Fall back to traditional filtering if DatabaseCoordinator methods fail
  updateFilteredNotifications(force: true)
  ```
- Avoid context.save() inside complex asynchronous operations that might cause EXC_BAD_ACCESS
- When DatabaseCoordinator methods fail with context issues, catch the error and use established filtering methods

## Modernization Strategy

### Three-Tier Architecture Pattern
- Implement a three-tiered architecture to maximize code reuse:
  1. **Data Layer**: ArticleService handles API and SwiftData operations
  2. **Business Logic Layer**: ArticleOperations contains shared operations
  3. **View Models Layer**: ViewModels specific to each view

- ArticleServiceProtocol enables dependency injection and testing:
  ```swift
  protocol ArticleServiceProtocol {
      func fetchArticles(topic: String?, isRead: Bool?, isBookmarked: Bool?, isArchived: Bool?) async throws -> [NotificationData]
      func fetchArticle(byId id: UUID) async throws -> NotificationData?
      func markArticle(id: UUID, asRead: Bool) async throws
      func markArticle(id: UUID, asBookmarked: Bool) async throws
      func markArticle(id: UUID, asArchived: Bool) async throws
      func deleteArticle(id: UUID) async throws
      // Other methods...
  }
  ```

- ArticleOperations provides shared functionality:
  ```swift
  class ArticleOperations {
      private let articleService: ArticleServiceProtocol
      
      init(articleService: ArticleServiceProtocol = ArticleService.shared) {
          self.articleService = articleService
      }
      
      // Shared operations for both NewsViewModel and NewsDetailViewModel
      func toggleReadStatus(for article: NotificationData) async throws {
          try await articleService.markArticle(id: article.id, asRead: !article.isViewed)
          NotificationUtils.updateAppBadgeCount()
      }
      
      func toggleBookmark(for article: NotificationData) async throws {
          try await articleService.markArticle(id: article.id, asBookmarked: !article.isBookmarked)
      }
      
      func getAttributedContent(for article: NotificationData, field: RichTextField) async -> NSAttributedString? {
          await MainActor.run {
              return getAttributedString(for: field, from: article, createIfMissing: true)
          }
      }
  }
  ```

### MVVM Pattern Implementation
- ViewModels should use the shared ArticleOperations for common functionality:
  ```swift
  class NewsViewModel: ObservableObject {
    private let articleOperations: ArticleOperations
    
    @Published var articles: [Article] = []
    @Published var isLoading: Bool = false
    @Published var error: Error? = nil
    
    init(articleOperations: ArticleOperations = ArticleOperations()) {
        self.articleOperations = articleOperations
    }
    
    func refreshArticles() async {
        await MainActor.run { isLoading = true }
        do {
            let articles = try await articleOperations.fetchArticles(topic: selectedTopic)
            await MainActor.run { 
                self.articles = articles
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                self.error = error
                self.isLoading = false
            }
        }
    }
    
    func toggleReadStatus(for article: Article) async {
        try? await articleOperations.toggleReadStatus(for: article)
    }
  }
  ```
- ViewModels should be injected into views using @StateObject for view-owned ViewModels or @ObservedObject for parent-provided ViewModels:
  ```swift
  struct NewsView: View {
      @StateObject private var viewModel = NewsViewModel()
      
      var body: some View {
          List(viewModel.articles) { article in
              ArticleRow(article: article)
          }
          .refreshable {
              await viewModel.refreshArticles()
          }
      }
  }
  ```
- Business logic should be moved from views to ViewModels
- UI state should be represented by @Published properties in ViewModels
- Use a dependency injection approach for services accessed by ViewModels

### SwiftData Implementation
- Use the @Model macro for all persistent model types:
  ```swift
  @Model
  class Article {
      // CloudKit compatibility: default values for all required properties
      var id: String = ""
      var title: String = ""
      var body: String = ""
      var publishDate: Date = Date()
      @Relationship(.cascade) var topics: [Topic]? = []
      
      // Additional fields for tracking state
      var isRead: Bool = false
      var isBookmarked: Bool = false
  }
  ```
- Ensure all required properties have default values for CloudKit compatibility
- Do not use @Attribute(.unique) constraints (not supported by CloudKit)
- Implement application-level uniqueness validation in repository layer
- Define the model container at the app level:
  ```swift
  @main
  struct ArgusApp: App {
      let container = ModelContainer(for: [Article.self, Topic.self])
      
      var body: some Scene {
          WindowGroup {
              ContentView()
          }
          .modelContainer(container)
      }
  }
  ```
- Use @Query for simple data access in views:
  ```swift
  @Query(filter: #Predicate<Article> { article in
      !article.isRead
  }, sort: \Article.publishDate, order: .reverse)
  private var unreadArticles: [Article]
  ```
- Create specialized SwiftData queries in ViewModels for more complex scenarios
- Implement proper error handling and retry mechanisms for data persistence operations

### Async/Await Implementation 
- Refactor API calls to use async/await instead of completion handlers:
  ```swift
  // Old approach with completion handlers
  func fetchArticles(completion: @escaping (Result<[Article], Error>) -> Void) {
      // Implementation
  }
  
  // New approach with async/await
  func fetchArticles() async throws -> [Article] {
      // Implementation
  }
  ```
- Use structured concurrency with proper task management:
  ```swift
  Task {
      try await articleService.updateArticlesFromServer()
  }
  ```
- Handle task cancellation properly:
  ```swift
  let task = Task {
      try await articleService.updateArticlesFromServer()
  }
  
  // Later if needed
  task.cancel()
  
  // In the operation
  try Task.checkCancellation()
  ```
- Use TaskGroup for concurrent operations with controlled concurrency
- Ensure proper actor isolation is maintained throughout the codebase

### Background Task Implementation
- Implement background tasks using .backgroundTask or BGTaskScheduler:
  ```swift
  // Modern implementation for iOS 18+
  .backgroundTask(.appRefresh("com.andrews.Argus.sync")) {
      await articleService.updateArticlesFromServer()
  }
  ```
- Handle task expiration properly:
  ```swift
  // For BGTaskScheduler (iOS 17 and earlier)
  task.expirationHandler = {
      // Handle task expiration (cancel any ongoing work)
  }
  ```
- Ensure background tasks are properly scheduled and managed
- Implement proper push notification handling with async/await

## Known Challenges
- UI becomes jittery during sync operations - will be addressed with MVVM refactoring
- Duplicate content issues occur during synchronization - will be resolved by SwiftData's unique constraints
- Swift 6 concurrency warnings for non-Sendable types like NSAttributedString in async contexts - will be eliminated with proper async/await implementation
- SwiftData context access issues can cause EXC_BAD_ACCESS crashes - will be addressed by using SwiftData's native context management instead of custom DatabaseCoordinator

## Modernization Component Mapping
- **SyncManager → ArticleService**:
  - ArticleService will handle all synchronization operations using async/await
  - Will interact directly with SwiftData rather than through DatabaseCoordinator
  - Will implement proper error handling and retry logic

- **DatabaseCoordinator → SwiftData ModelContext**:
  - Direct use of SwiftData ModelContext will replace DatabaseCoordinator
  - Transaction management will be handled by SwiftData's built-in mechanisms
  - Complex queries will be handled by SwiftData's query DSL

- **Shared UI Logic → ArticleOperations**:
  - Common operations between NewsView and NewsDetailView extracted to shared layer
  - State management (read/bookmark/archive) handled consistently
  - Rich text processing consolidated in shared component
  - Consistent error handling across both views

- **NotificationCenter → Observable Properties**:
  - State updates will be communicated via @Published properties
  - Views will observe ViewModels through ObservableObject conformance
  - No more manual subscription/unsubscription management

- **Background Tasks → .backgroundTask or BGTaskScheduler**:
  - Modern background task APIs will replace custom background task handling
  - Proper task cancellation will be implemented for all background operations

## Modernization Strategy Guidelines
- Implement shared components first to establish foundation for ViewModels
- Prioritize code reuse to eliminate duplication between similar views
- Implement features incrementally, following the phased approach
- Maintain feature parity throughout the modernization process
- Test each component thoroughly before moving to the next phase
- Focus on fixing existing issues during the modernization process
- Keep comprehensive documentation of architectural decisions
- Use Swift's newest features where appropriate, but maintain compatibility with iOS 18
- Prioritize user experience over implementation elegance

## Shared Component Best Practices
- **Interface-Based Design**: Use protocols to define service interfaces
- **Dependency Injection**: Make dependencies injectable for testing
- **Clear Responsibilities**: Each layer should have well-defined responsibilities
- **Thin View Models**: Keep view models focused on UI state, delegate business logic to ArticleOperations
- **Consistent Error Handling**: Implement unified error types across components
- **State Synchronization**: Ensure shared state is consistent between components
- **Testing Strategy**: Test shared components independently from ViewModels

## User Workflow Preferences
- Focus on fixing critical bugs before adding new features
- Prioritize performance improvements in the sync process
- Document important decisions and their rationale
- Ensure smooth user experience during the transition to the new architecture

## Testing Approach
- UI tests are located in ArgusUITests directory
- Use TestHelpers.swift for common test utilities
- Critical user flows should have dedicated UI tests
- Add stress tests for DatabaseCoordinator to verify concurrency safety
