# Argus iOS App - Project Intelligence

This file captures important patterns, preferences, and project intelligence that helps Cline work more effectively with the Argus iOS app project. It will be updated as new patterns and insights are discovered.

## Code Style Preferences

### Swift Conventions
- Use Swift's native error handling with `do-catch` blocks
- Prefer Swift's strong typing and avoid force unwrapping when possible
- Use Swift's property wrappers (@Published, @State, etc.) for SwiftUI state management
- Follow Apple's Swift API Design Guidelines for naming conventions

### SwiftUI Patterns
- Use the MVVM pattern with ObservableObject for complex views
- Extract reusable components into separate views
- Use preview providers for all UI components
- Avoid excessive view modifiers that can impact performance

## Project-Specific Patterns

### File Organization
- Swift files are organized by functionality within the main Argus directory
- UI components are separated from data processing logic
- Utilities and helpers are in dedicated files (MarkdownUtilities, NotificationUtils, etc.)

### Data Flow
- The SyncManager handles all data synchronization with the backend
- The DatabaseCoordinator centralizes all database operations using the actor model
- View models observe data changes and update the UI accordingly

### Known Implementation Paths
- Push notifications are set up using the Apple Push Notification Service and the AuthKey_KKR79MB4FW.p8 file
- Markdown conversion happens in MarkdownUtilities.swift
- Background sync operations are managed in BackgroundContextManager.swift
- Array chunking utilities are in ArrayExtensions.swift

## Swift 6 Concurrency Patterns

### NSAttributedString and Sendable Constraints
- NSAttributedString is not Sendable and requires special handling in async contexts
- Always use @MainActor for functions that generate or manipulate NSAttributedString for UI
- For LazyLoadingContentView and similar components, use Task { @MainActor in ... } to constrain the entire task
- Avoid passing NSAttributedString across actor boundaries without proper isolation:
  ```swift
  // Wrong: Crossing actor boundaries with non-Sendable type
  let attributedString = await backgroundActor.getAttributedString()
  
  // Correct: Keep operations isolated to MainActor
  await MainActor.run {
      let attributedString = getAttributedString()
      // Use attributedString here, within MainActor context
  }
  ```
- Generate rich text synchronously during database operations:
  ```swift
  // Wrong: Asynchronous fire-and-forget approach causes race conditions
  Task { @MainActor in
      _ = getAttributedString(for: .title, from: article)
  }
  
  // Correct: Synchronous generation ensures rich text exists before transaction completes
  await MainActor.run {
      _ = getAttributedString(for: .title, from: article)
      _ = getAttributedString(for: .body, from: article)
  }
  ```

### Actor Model Implementation
- The DatabaseCoordinator is implemented as a Swift actor to provide thread-safe access to SwiftData
- All database operations should go through the DatabaseCoordinator to ensure isolation
- Use the pattern: `await DatabaseCoordinator.shared.methodName()` for all database operations

### Variable Capture in Closures
- Create local copies of captured variables before using them in closures:
  ```swift
  let localCopy = capturedVariable
  // Use localCopy in closure instead of directly using capturedVariable
  ```
- When dealing with collections within actors, prefer collecting results in local collections first, then update actor-isolated state in a single step

### Transaction Patterns
- Use the performTransaction pattern for all database operations:
  ```swift
  try await performTransaction { coordinator, context in
      // Use context for database operations
      // Return result that will be returned from performTransaction
  }
  ```
- Add fallback paths for transaction errors, e.g.:
  ```swift
  return (try? await performTransaction { ... }) ?? defaultValue
  ```

### Batch Processing
- When processing batches of items, use ArrayExtensions.chunked(into:) to create smaller batches:
  ```swift
  for batch in items.chunked(into: 100) {
      // Process batch
  }
  ```
- Use Swift's TaskGroup for concurrent processing while controlling maximum concurrency

### NSCache Usage
- NSCache is not Sendable - avoid directly accessing actor-isolated NSCache properties from closures
- Instead, read values from caches at the beginning of functions, then use locals in closures
- Update caches after transaction completion, not within transaction blocks

## Known Challenges
- UI becomes jittery during sync operations - likely due to operations on the main thread
- Duplicate content issues occur during synchronization - may be improved by DatabaseCoordinator's batch detection
- Swift 6 concurrency warnings for non-Sendable types like NSAttributedString in async contexts - fixed in most places but worth monitoring

## SyncManager and DatabaseCoordinator Integration
- SyncManager delegates all database operations to DatabaseCoordinator
- SyncManager.processArticlesDetached handles batch processing
- SyncManager handles network operations, but DatabaseCoordinator performs all database interactions
- Duplication prevention uses both SyncManager's registry and DatabaseCoordinator's existence checks

## User Workflow Preferences
- Focus on fixing critical bugs before adding new features
- Prioritize performance improvements in the sync process
- Document important decisions and their rationale

## Testing Approach
- UI tests are located in ArgusUITests directory
- Use TestHelpers.swift for common test utilities
- Critical user flows should have dedicated UI tests
- Add stress tests for DatabaseCoordinator to verify concurrency safety
